warning: Type
 --> $DIR/tests/pass/types/inference/generatedContextualTypings/3.ts:2:24
  |
2 | class Derived1 extends Base { private m; }
  |                        ^^^^
  |
  = note: typeof Base

warning: Type
 --> $DIR/tests/pass/types/inference/generatedContextualTypings/3.ts:3:24
  |
3 | class Derived2 extends Base { private n; }
  |                        ^^^^
  |
  = note: typeof Base

warning: Type
 --> $DIR/tests/pass/types/inference/generatedContextualTypings/3.ts:5:13
  |
5 | var b = new Base(), d1 = new Derived1(), d2 = new Derived2();
  |             ^^^^
  |
  = note: typeof Base

warning: Type
 --> $DIR/tests/pass/types/inference/generatedContextualTypings/3.ts:5:9
  |
5 | var b = new Base(), d1 = new Derived1(), d2 = new Derived2();
  |         ^^^^^^^^^^
  |
  = note: Base

warning: Type
 --> $DIR/tests/pass/types/inference/generatedContextualTypings/3.ts:5:30
  |
5 | var b = new Base(), d1 = new Derived1(), d2 = new Derived2();
  |                              ^^^^^^^^
  |
  = note: typeof Derived1

warning: Type
 --> $DIR/tests/pass/types/inference/generatedContextualTypings/3.ts:5:26
  |
5 | var b = new Base(), d1 = new Derived1(), d2 = new Derived2();
  |                          ^^^^^^^^^^^^^^
  |
  = note: Derived1

warning: Type
 --> $DIR/tests/pass/types/inference/generatedContextualTypings/3.ts:5:51
  |
5 | var b = new Base(), d1 = new Derived1(), d2 = new Derived2();
  |                                                   ^^^^^^^^
  |
  = note: typeof Derived2

warning: Type
 --> $DIR/tests/pass/types/inference/generatedContextualTypings/3.ts:5:47
  |
5 | var b = new Base(), d1 = new Derived1(), d2 = new Derived2();
  |                                               ^^^^^^^^^^^^^^
  |
  = note: Derived2

warning: Type
 --> $DIR/tests/pass/types/inference/generatedContextualTypings/3.ts:7:70
  |
7 | export function x123(parm: () => Base[] = function named() { return [d1, d2] }) { }
  |                                                                      ^^
  |
  = note: Derived1

warning: Type
 --> $DIR/tests/pass/types/inference/generatedContextualTypings/3.ts:7:74
  |
7 | export function x123(parm: () => Base[] = function named() { return [d1, d2] }) { }
  |                                                                          ^^
  |
  = note: Derived2

warning: Type
 --> $DIR/tests/pass/types/inference/generatedContextualTypings/3.ts:7:69
  |
7 | export function x123(parm: () => Base[] = function named() { return [d1, d2] }) { }
  |                                                                     ^^^^^^^^
  |
  = note: [Derived1, Derived2]

warning: Type
 --> $DIR/tests/pass/types/inference/generatedContextualTypings/3.ts:7:43
  |
7 | export function x123(parm: () => Base[] = function named() { return [d1, d2] }) { }
  |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: () => [Derived1, Derived2]

warning: Type
 --> $DIR/tests/pass/types/inference/generatedContextualTypings/3.ts:8:73
  |
8 | export function x126(parm: { (): Base[]; } = function named() { return [d1, d2] }) { }
  |                                                                         ^^
  |
  = note: Derived1

warning: Type
 --> $DIR/tests/pass/types/inference/generatedContextualTypings/3.ts:8:77
  |
8 | export function x126(parm: { (): Base[]; } = function named() { return [d1, d2] }) { }
  |                                                                             ^^
  |
  = note: Derived2

warning: Type
 --> $DIR/tests/pass/types/inference/generatedContextualTypings/3.ts:8:72
  |
8 | export function x126(parm: { (): Base[]; } = function named() { return [d1, d2] }) { }
  |                                                                        ^^^^^^^^
  |
  = note: [Derived1, Derived2]

warning: Type
 --> $DIR/tests/pass/types/inference/generatedContextualTypings/3.ts:8:46
  |
8 | export function x126(parm: { (): Base[]; } = function named() { return [d1, d2] }) { }
  |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: () => [Derived1, Derived2]

