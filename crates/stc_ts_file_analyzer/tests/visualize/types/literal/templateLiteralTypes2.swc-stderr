
  x Type
   ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:4:1]
 4 | function ft1<T extends string>(s: string, n: number, u: 'foo' | 'bar' | 'baz', t: T) {
 5 |     const c1 = `abc${s}`;
   :                      ^
 6 |     const c2 = `abc${n}`;
   `----

Error: 
  > string

  x Type
   ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:4:1]
 4 | function ft1<T extends string>(s: string, n: number, u: 'foo' | 'bar' | 'baz', t: T) {
 5 |     const c1 = `abc${s}`;
   :                ^^^^^^^^^
 6 |     const c2 = `abc${n}`;
   `----

Error: 
  > `abc${string}`

  x Type
   ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:5:1]
 5 |     const c1 = `abc${s}`;
 6 |     const c2 = `abc${n}`;
   :                      ^
 7 |     const c3 = `abc${u}`;
   `----

Error: 
  > number

  x Type
   ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:5:1]
 5 |     const c1 = `abc${s}`;
 6 |     const c2 = `abc${n}`;
   :                ^^^^^^^^^
 7 |     const c3 = `abc${u}`;
   `----

Error: 
  > `abc${number}`

  x Type
   ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:6:1]
 6 |     const c2 = `abc${n}`;
 7 |     const c3 = `abc${u}`;
   :                      ^
 8 |     const c4 = `abc${t}`;
   `----

Error: 
  > ('foo' | 'bar' | 'baz')

  x Type
   ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:6:1]
 6 |     const c2 = `abc${n}`;
 7 |     const c3 = `abc${u}`;
   :                ^^^^^^^^^
 8 |     const c4 = `abc${t}`;
   `----

Error: 
  > `abc${('foo' | 'bar' | 'baz')}`

  x Type
   ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:7:1]
 7 |     const c3 = `abc${u}`;
 8 |     const c4 = `abc${t}`;
   :                      ^
 9 |     const d1: `abc${string}` = `abc${s}`;
   `----

Error: 
  > T

  x Type
   ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:7:1]
 7 |     const c3 = `abc${u}`;
 8 |     const c4 = `abc${t}`;
   :                ^^^^^^^^^
 9 |     const d1: `abc${string}` = `abc${s}`;
   `----

Error: 
  > `abc${T}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:8:1]
  8 |     const c4 = `abc${t}`;
  9 |     const d1: `abc${string}` = `abc${s}`;
    :                                      ^
 10 |     const d2: `abc${number}` = `abc${n}`;
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:8:1]
  8 |     const c4 = `abc${t}`;
  9 |     const d1: `abc${string}` = `abc${s}`;
    :                                ^^^^^^^^^
 10 |     const d2: `abc${number}` = `abc${n}`;
    `----

Error: 
  > `abc${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:9:1]
  9 |     const d1: `abc${string}` = `abc${s}`;
 10 |     const d2: `abc${number}` = `abc${n}`;
    :                                      ^
 11 |     const d3: `abc${'foo' | 'bar' | 'baz'}` = `abc${u}`;
    `----

Error: 
  > number

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:9:1]
  9 |     const d1: `abc${string}` = `abc${s}`;
 10 |     const d2: `abc${number}` = `abc${n}`;
    :                                ^^^^^^^^^
 11 |     const d3: `abc${'foo' | 'bar' | 'baz'}` = `abc${u}`;
    `----

Error: 
  > `abc${number}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:10:1]
 10 |     const d2: `abc${number}` = `abc${n}`;
 11 |     const d3: `abc${'foo' | 'bar' | 'baz'}` = `abc${u}`;
    :                                                     ^
 12 |     const d4: `abc${T}` = `abc${t}`;
    `----

Error: 
  > ('foo' | 'bar' | 'baz')

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:10:1]
 10 |     const d2: `abc${number}` = `abc${n}`;
 11 |     const d3: `abc${'foo' | 'bar' | 'baz'}` = `abc${u}`;
    :                                               ^^^^^^^^^
 12 |     const d4: `abc${T}` = `abc${t}`;
    `----

Error: 
  > `abc${('foo' | 'bar' | 'baz')}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:11:1]
 11 |     const d3: `abc${'foo' | 'bar' | 'baz'}` = `abc${u}`;
 12 |     const d4: `abc${T}` = `abc${t}`;
    :                                 ^
 13 | }
    `----

Error: 
  > T

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:11:1]
 11 |     const d3: `abc${'foo' | 'bar' | 'baz'}` = `abc${u}`;
 12 |     const d4: `abc${T}` = `abc${t}`;
    :                           ^^^^^^^^^
 13 | }
    `----

Error: 
  > `abc${T}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:15:1]
 15 | function ft2(s: string) {
 16 |     return `abc${s}`;
    :                  ^
 17 | }
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:15:1]
 15 | function ft2(s: string) {
 16 |     return `abc${s}`;
    :            ^^^^^^^^^
 17 | }
    `----

Error: 
  > `abc${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:19:1]
 19 | function ft10(s: string) {
 20 |     const c1 = `abc${s}`;  // Type string
    :                      ^
 21 |     let v1 = c1;  // Type string
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:19:1]
 19 | function ft10(s: string) {
 20 |     const c1 = `abc${s}`;  // Type string
    :                ^^^^^^^^^
 21 |     let v1 = c1;  // Type string
    `----

Error: 
  > `abc${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:20:1]
 20 |     const c1 = `abc${s}`;  // Type string
 21 |     let v1 = c1;  // Type string
    :              ^^
 22 |     const c2 = c1;  // Type string
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:21:1]
 21 |     let v1 = c1;  // Type string
 22 |     const c2 = c1;  // Type string
    :                ^^
 23 |     let v2 = c2;  // Type string
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:22:1]
 22 |     const c2 = c1;  // Type string
 23 |     let v2 = c2;  // Type string
    :              ^^
 24 |     const c3: `abc${string}` = `abc${s}`;
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:23:1]
 23 |     let v2 = c2;  // Type string
 24 |     const c3: `abc${string}` = `abc${s}`;
    :                                      ^
 25 |     let v3 = c3;  // Type `abc${string}`
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:23:1]
 23 |     let v2 = c2;  // Type string
 24 |     const c3: `abc${string}` = `abc${s}`;
    :                                ^^^^^^^^^
 25 |     let v3 = c3;  // Type `abc${string}`
    `----

Error: 
  > `abc${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:24:1]
 24 |     const c3: `abc${string}` = `abc${s}`;
 25 |     let v3 = c3;  // Type `abc${string}`
    :              ^^
 26 |     const c4: `abc${string}` = c1;  // Type `abc${string}`
    `----

Error: 
  > `abc${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:25:1]
 25 |     let v3 = c3;  // Type `abc${string}`
 26 |     const c4: `abc${string}` = c1;  // Type `abc${string}`
    :                                ^^
 27 |     let v4 = c4;  // Type `abc${string}`
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:26:1]
 26 |     const c4: `abc${string}` = c1;  // Type `abc${string}`
 27 |     let v4 = c4;  // Type `abc${string}`
    :              ^^
 28 | }
    `----

Error: 
  > `abc${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:30:1]
 30 | function ft11(s: string, cond: boolean) {
 31 |     const c1 = cond ? `foo${s}` : `bar${s}`;  // string
    :                ^^^^
 32 |     const c2: `foo${string}` | `bar${string}` = c1;  // `foo${string}` | `bar${string}`
    `----

Error: 
  > boolean

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:30:1]
 30 | function ft11(s: string, cond: boolean) {
 31 |     const c1 = cond ? `foo${s}` : `bar${s}`;  // string
    :                             ^
 32 |     const c2: `foo${string}` | `bar${string}` = c1;  // `foo${string}` | `bar${string}`
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:30:1]
 30 | function ft11(s: string, cond: boolean) {
 31 |     const c1 = cond ? `foo${s}` : `bar${s}`;  // string
    :                       ^^^^^^^^^
 32 |     const c2: `foo${string}` | `bar${string}` = c1;  // `foo${string}` | `bar${string}`
    `----

Error: 
  > `foo${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:30:1]
 30 | function ft11(s: string, cond: boolean) {
 31 |     const c1 = cond ? `foo${s}` : `bar${s}`;  // string
    :                                         ^
 32 |     const c2: `foo${string}` | `bar${string}` = c1;  // `foo${string}` | `bar${string}`
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:30:1]
 30 | function ft11(s: string, cond: boolean) {
 31 |     const c1 = cond ? `foo${s}` : `bar${s}`;  // string
    :                                   ^^^^^^^^^
 32 |     const c2: `foo${string}` | `bar${string}` = c1;  // `foo${string}` | `bar${string}`
    `----

Error: 
  > `bar${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:30:1]
 30 | function ft11(s: string, cond: boolean) {
 31 |     const c1 = cond ? `foo${s}` : `bar${s}`;  // string
    :                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 32 |     const c2: `foo${string}` | `bar${string}` = c1;  // `foo${string}` | `bar${string}`
    `----

Error: 
  > (`foo${string}` | `bar${string}`)

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:31:1]
 31 |     const c1 = cond ? `foo${s}` : `bar${s}`;  // string
 32 |     const c2: `foo${string}` | `bar${string}` = c1;  // `foo${string}` | `bar${string}`
    :                                                 ^^
 33 |     const c3 = cond ? c1 : c2;  // string
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:32:1]
 32 |     const c2: `foo${string}` | `bar${string}` = c1;  // `foo${string}` | `bar${string}`
 33 |     const c3 = cond ? c1 : c2;  // string
    :                ^^^^
 34 |     const c4 = cond ? c3 : `baz${s}`;  // string
    `----

Error: 
  > boolean

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:32:1]
 32 |     const c2: `foo${string}` | `bar${string}` = c1;  // `foo${string}` | `bar${string}`
 33 |     const c3 = cond ? c1 : c2;  // string
    :                       ^^
 34 |     const c4 = cond ? c3 : `baz${s}`;  // string
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:32:1]
 32 |     const c2: `foo${string}` | `bar${string}` = c1;  // `foo${string}` | `bar${string}`
 33 |     const c3 = cond ? c1 : c2;  // string
    :                            ^^
 34 |     const c4 = cond ? c3 : `baz${s}`;  // string
    `----

Error: 
  > (`foo${string}` | `bar${string}`)

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:32:1]
 32 |     const c2: `foo${string}` | `bar${string}` = c1;  // `foo${string}` | `bar${string}`
 33 |     const c3 = cond ? c1 : c2;  // string
    :                ^^^^^^^^^^^^^^
 34 |     const c4 = cond ? c3 : `baz${s}`;  // string
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:33:1]
 33 |     const c3 = cond ? c1 : c2;  // string
 34 |     const c4 = cond ? c3 : `baz${s}`;  // string
    :                ^^^^
 35 |     const c5: `foo${string}` | `bar${string}` | `baz${string}` = c4; // `foo${string}` | `bar${string}` | `baz${string}`
    `----

Error: 
  > boolean

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:33:1]
 33 |     const c3 = cond ? c1 : c2;  // string
 34 |     const c4 = cond ? c3 : `baz${s}`;  // string
    :                       ^^
 35 |     const c5: `foo${string}` | `bar${string}` | `baz${string}` = c4; // `foo${string}` | `bar${string}` | `baz${string}`
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:33:1]
 33 |     const c3 = cond ? c1 : c2;  // string
 34 |     const c4 = cond ? c3 : `baz${s}`;  // string
    :                                  ^
 35 |     const c5: `foo${string}` | `bar${string}` | `baz${string}` = c4; // `foo${string}` | `bar${string}` | `baz${string}`
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:33:1]
 33 |     const c3 = cond ? c1 : c2;  // string
 34 |     const c4 = cond ? c3 : `baz${s}`;  // string
    :                            ^^^^^^^^^
 35 |     const c5: `foo${string}` | `bar${string}` | `baz${string}` = c4; // `foo${string}` | `bar${string}` | `baz${string}`
    `----

Error: 
  > `baz${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:33:1]
 33 |     const c3 = cond ? c1 : c2;  // string
 34 |     const c4 = cond ? c3 : `baz${s}`;  // string
    :                ^^^^^^^^^^^^^^^^^^^^^
 35 |     const c5: `foo${string}` | `bar${string}` | `baz${string}` = c4; // `foo${string}` | `bar${string}` | `baz${string}`
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:34:1]
 34 |     const c4 = cond ? c3 : `baz${s}`;  // string
 35 |     const c5: `foo${string}` | `bar${string}` | `baz${string}` = c4; // `foo${string}` | `bar${string}` | `baz${string}`
    :                                                                  ^^
 36 |     let v1 = c1;  // string
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:35:1]
 35 |     const c5: `foo${string}` | `bar${string}` | `baz${string}` = c4; // `foo${string}` | `bar${string}` | `baz${string}`
 36 |     let v1 = c1;  // string
    :              ^^
 37 |     let v2 = c2;  // `foo${string}` | `bar${string}`
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:36:1]
 36 |     let v1 = c1;  // string
 37 |     let v2 = c2;  // `foo${string}` | `bar${string}`
    :              ^^
 38 |     let v3 = c3;  // string
    `----

Error: 
  > (`foo${string}` | `bar${string}`)

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:37:1]
 37 |     let v2 = c2;  // `foo${string}` | `bar${string}`
 38 |     let v3 = c3;  // string
    :              ^^
 39 |     let v4 = c4;  // string
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:38:1]
 38 |     let v3 = c3;  // string
 39 |     let v4 = c4;  // string
    :              ^^
 40 |     let v5 = c5;  // `foo${string}` | `bar${string}` | `baz${string}`
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:39:1]
 39 |     let v4 = c4;  // string
 40 |     let v5 = c5;  // `foo${string}` | `bar${string}` | `baz${string}`
    :              ^^
 41 | }
    `----

Error: 
  > (`foo${string}` | `bar${string}` | `baz${string}`)

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:43:1]
 43 | function ft12(s: string) {
 44 |     const c1 = `foo${s}`;
    :                      ^
 45 |     let v1 = c1;
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:43:1]
 43 | function ft12(s: string) {
 44 |     const c1 = `foo${s}`;
    :                ^^^^^^^^^
 45 |     let v1 = c1;
    `----

Error: 
  > `foo${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:44:1]
 44 |     const c1 = `foo${s}`;
 45 |     let v1 = c1;
    :              ^^
 46 |     const c2: `foo${string}` = `foo${s}`;
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:45:1]
 45 |     let v1 = c1;
 46 |     const c2: `foo${string}` = `foo${s}`;
    :                                      ^
 47 |     let v2 = c2;
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:45:1]
 45 |     let v1 = c1;
 46 |     const c2: `foo${string}` = `foo${s}`;
    :                                ^^^^^^^^^
 47 |     let v2 = c2;
    `----

Error: 
  > `foo${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:46:1]
 46 |     const c2: `foo${string}` = `foo${s}`;
 47 |     let v2 = c2;
    :              ^^
 48 |     const c3 = `foo${s}` as `foo${string}`;
    `----

Error: 
  > `foo${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:47:1]
 47 |     let v2 = c2;
 48 |     const c3 = `foo${s}` as `foo${string}`;
    :                      ^
 49 |     let v3 = c3;
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:47:1]
 47 |     let v2 = c2;
 48 |     const c3 = `foo${s}` as `foo${string}`;
    :                ^^^^^^^^^
 49 |     let v3 = c3;
    `----

Error: 
  > `foo${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:47:1]
 47 |     let v2 = c2;
 48 |     const c3 = `foo${s}` as `foo${string}`;
    :                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
 49 |     let v3 = c3;
    `----

Error: 
  > `foo${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:48:1]
 48 |     const c3 = `foo${s}` as `foo${string}`;
 49 |     let v3 = c3;
    :              ^^
 50 |     const c4 = <`foo${string}`>`foo${s}`;
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:49:1]
 49 |     let v3 = c3;
 50 |     const c4 = <`foo${string}`>`foo${s}`;
    :                                      ^
 51 |     let v4 = c4;
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:49:1]
 49 |     let v3 = c3;
 50 |     const c4 = <`foo${string}`>`foo${s}`;
    :                                ^^^^^^^^^
 51 |     let v4 = c4;
    `----

Error: 
  > `foo${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:49:1]
 49 |     let v3 = c3;
 50 |     const c4 = <`foo${string}`>`foo${s}`;
    :                ^^^^^^^^^^^^^^^^^^^^^^^^^
 51 |     let v4 = c4;
    `----

Error: 
  > `foo${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:50:1]
 50 |     const c4 = <`foo${string}`>`foo${s}`;
 51 |     let v4 = c4;
    :              ^^
 52 |     const c5 = `foo${s}` as const;
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:51:1]
 51 |     let v4 = c4;
 52 |     const c5 = `foo${s}` as const;
    :                      ^
 53 |     let v5 = c5;
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:51:1]
 51 |     let v4 = c4;
 52 |     const c5 = `foo${s}` as const;
    :                ^^^^^^^^^
 53 |     let v5 = c5;
    `----

Error: 
  > `foo${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:51:1]
 51 |     let v4 = c4;
 52 |     const c5 = `foo${s}` as const;
    :                ^^^^^^^^^^^^^^^^^^
 53 |     let v5 = c5;
    `----

Error: 
  > `foo${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:52:1]
 52 |     const c5 = `foo${s}` as const;
 53 |     let v5 = c5;
    :              ^^
 54 | }
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:59:1]
 59 | function ft13(s: string, cond: boolean) {
 60 |     let x1 = widening(`foo${s}`);
    :              ^^^^^^^^
 61 |     let x2 = widening(cond ? 'a' : `foo${s}`);
    `----

Error: 
  > <T>(x: T) => T

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:59:1]
 59 | function ft13(s: string, cond: boolean) {
 60 |     let x1 = widening(`foo${s}`);
    :                             ^
 61 |     let x2 = widening(cond ? 'a' : `foo${s}`);
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:59:1]
 59 | function ft13(s: string, cond: boolean) {
 60 |     let x1 = widening(`foo${s}`);
    :                       ^^^^^^^^^
 61 |     let x2 = widening(cond ? 'a' : `foo${s}`);
    `----

Error: 
  > `foo${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:59:1]
 59 | function ft13(s: string, cond: boolean) {
 60 |     let x1 = widening(`foo${s}`);
    :              ^^^^^^^^^^^^^^^^^^^
 61 |     let x2 = widening(cond ? 'a' : `foo${s}`);
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:60:1]
 60 |     let x1 = widening(`foo${s}`);
 61 |     let x2 = widening(cond ? 'a' : `foo${s}`);
    :              ^^^^^^^^
 62 |     let y1 = nonWidening(`foo${s}`);
    `----

Error: 
  > <T>(x: T) => T

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:60:1]
 60 |     let x1 = widening(`foo${s}`);
 61 |     let x2 = widening(cond ? 'a' : `foo${s}`);
    :                       ^^^^
 62 |     let y1 = nonWidening(`foo${s}`);
    `----

Error: 
  > boolean

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:60:1]
 60 |     let x1 = widening(`foo${s}`);
 61 |     let x2 = widening(cond ? 'a' : `foo${s}`);
    :                                          ^
 62 |     let y1 = nonWidening(`foo${s}`);
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:60:1]
 60 |     let x1 = widening(`foo${s}`);
 61 |     let x2 = widening(cond ? 'a' : `foo${s}`);
    :                                    ^^^^^^^^^
 62 |     let y1 = nonWidening(`foo${s}`);
    `----

Error: 
  > `foo${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:60:1]
 60 |     let x1 = widening(`foo${s}`);
 61 |     let x2 = widening(cond ? 'a' : `foo${s}`);
    :                       ^^^^^^^^^^^^^^^^^^^^^^
 62 |     let y1 = nonWidening(`foo${s}`);
    `----

Error: 
  > ('a' | `foo${string}`)

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:60:1]
 60 |     let x1 = widening(`foo${s}`);
 61 |     let x2 = widening(cond ? 'a' : `foo${s}`);
    :              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 62 |     let y1 = nonWidening(`foo${s}`);
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:61:1]
 61 |     let x2 = widening(cond ? 'a' : `foo${s}`);
 62 |     let y1 = nonWidening(`foo${s}`);
    :              ^^^^^^^^^^^
 63 |     let y2 = nonWidening(cond ? 'a' : `foo${s}`);
    `----

Error: 
  > <T extends (string | number | symbol)>(x: T) => T

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:61:1]
 61 |     let x2 = widening(cond ? 'a' : `foo${s}`);
 62 |     let y1 = nonWidening(`foo${s}`);
    :                                ^
 63 |     let y2 = nonWidening(cond ? 'a' : `foo${s}`);
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:61:1]
 61 |     let x2 = widening(cond ? 'a' : `foo${s}`);
 62 |     let y1 = nonWidening(`foo${s}`);
    :                          ^^^^^^^^^
 63 |     let y2 = nonWidening(cond ? 'a' : `foo${s}`);
    `----

Error: 
  > `foo${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:61:1]
 61 |     let x2 = widening(cond ? 'a' : `foo${s}`);
 62 |     let y1 = nonWidening(`foo${s}`);
    :              ^^^^^^^^^^^^^^^^^^^^^^
 63 |     let y2 = nonWidening(cond ? 'a' : `foo${s}`);
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:62:1]
 62 |     let y1 = nonWidening(`foo${s}`);
 63 |     let y2 = nonWidening(cond ? 'a' : `foo${s}`);
    :              ^^^^^^^^^^^
 64 | }
    `----

Error: 
  > <T extends (string | number | symbol)>(x: T) => T

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:62:1]
 62 |     let y1 = nonWidening(`foo${s}`);
 63 |     let y2 = nonWidening(cond ? 'a' : `foo${s}`);
    :                          ^^^^
 64 | }
    `----

Error: 
  > boolean

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:62:1]
 62 |     let y1 = nonWidening(`foo${s}`);
 63 |     let y2 = nonWidening(cond ? 'a' : `foo${s}`);
    :                                             ^
 64 | }
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:62:1]
 62 |     let y1 = nonWidening(`foo${s}`);
 63 |     let y2 = nonWidening(cond ? 'a' : `foo${s}`);
    :                                       ^^^^^^^^^
 64 | }
    `----

Error: 
  > `foo${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:62:1]
 62 |     let y1 = nonWidening(`foo${s}`);
 63 |     let y2 = nonWidening(cond ? 'a' : `foo${s}`);
    :                          ^^^^^^^^^^^^^^^^^^^^^^
 64 | }
    `----

Error: 
  > ('a' | `foo${string}`)

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:62:1]
 62 |     let y1 = nonWidening(`foo${s}`);
 63 |     let y2 = nonWidening(cond ? 'a' : `foo${s}`);
    :              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 64 | }
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:68:1]
 68 | function ft14(t: `foo${number}`) {
 69 |     let x1: string = t;
    :                      ^
 70 |     let x2: String = t;
    `----

Error: 
  > `foo${number}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:69:1]
 69 |     let x1: string = t;
 70 |     let x2: String = t;
    :                      ^
 71 |     let x3: Object = t;
    `----

Error: 
  > `foo${number}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:70:1]
 70 |     let x2: String = t;
 71 |     let x3: Object = t;
    :                      ^
 72 |     let x4: {} = t;
    `----

Error: 
  > `foo${number}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:71:1]
 71 |     let x3: Object = t;
 72 |     let x4: {} = t;
    :                  ^
 73 |     let x6: { length: number } = t;
    `----

Error: 
  > `foo${number}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:72:1]
 72 |     let x4: {} = t;
 73 |     let x6: { length: number } = t;
    :                                  ^
 74 | }
    `----

Error: 
  > `foo${number}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:79:1]
 79 | function ft20(s: string) {
 80 |     let x1 = g1(`xyz-${s}`);  // string
    :              ^^
 81 |     let x2 = g2(`xyz-${s}`);  // `xyz-${string}`
    `----

Error: 
  > <T>(x: T) => T

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:79:1]
 79 | function ft20(s: string) {
 80 |     let x1 = g1(`xyz-${s}`);  // string
    :                        ^
 81 |     let x2 = g2(`xyz-${s}`);  // `xyz-${string}`
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:79:1]
 79 | function ft20(s: string) {
 80 |     let x1 = g1(`xyz-${s}`);  // string
    :                 ^^^^^^^^^^
 81 |     let x2 = g2(`xyz-${s}`);  // `xyz-${string}`
    `----

Error: 
  > `xyz-${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:79:1]
 79 | function ft20(s: string) {
 80 |     let x1 = g1(`xyz-${s}`);  // string
    :              ^^^^^^^^^^^^^^
 81 |     let x2 = g2(`xyz-${s}`);  // `xyz-${string}`
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:80:1]
 80 |     let x1 = g1(`xyz-${s}`);  // string
 81 |     let x2 = g2(`xyz-${s}`);  // `xyz-${string}`
    :              ^^
 82 | }
    `----

Error: 
  > <T extends string>(x: T) => T

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:80:1]
 80 |     let x1 = g1(`xyz-${s}`);  // string
 81 |     let x2 = g2(`xyz-${s}`);  // `xyz-${string}`
    :                        ^
 82 | }
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:80:1]
 80 |     let x1 = g1(`xyz-${s}`);  // string
 81 |     let x2 = g2(`xyz-${s}`);  // `xyz-${string}`
    :                 ^^^^^^^^^^
 82 | }
    `----

Error: 
  > `xyz-${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:80:1]
 80 |     let x1 = g1(`xyz-${s}`);  // string
 81 |     let x2 = g2(`xyz-${s}`);  // `xyz-${string}`
    :              ^^^^^^^^^^^^^^
 82 | }
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:87:1]
 87 | 
 88 | const t1 = takesLiteral("foo.bar.baz"); // "baz"
    :            ^^^^^^^^^^^^
 89 | const id2 = "foo.bar.baz";
    `----

Error: 
  > <T extends string>(literal: T) => T extends `foo.bar.${infer R}` ? R : unknown

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:87:1]
 87 | 
 88 | const t1 = takesLiteral("foo.bar.baz"); // "baz"
    :            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
 89 | const id2 = "foo.bar.baz";
    `----

Error: 
  > "baz"

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:89:1]
 89 | const id2 = "foo.bar.baz";
 90 | const t2 = takesLiteral(id2); // "baz"
    :            ^^^^^^^^^^^^
    `----

Error: 
  > <T extends string>(literal: T) => T extends `foo.bar.${infer R}` ? R : unknown

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:89:1]
 89 | const id2 = "foo.bar.baz";
 90 | const t2 = takesLiteral(id2); // "baz"
    :                         ^^^
    `----

Error: 
  > "foo.bar.baz"

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:89:1]
 89 | const id2 = "foo.bar.baz";
 90 | const t2 = takesLiteral(id2); // "baz"
    :            ^^^^^^^^^^^^^^^^^
    `----

Error: 
  > "baz"

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:92:1]
 92 | declare const someString: string;
 93 | const t3 = takesLiteral(`foo.bar.${someString}`);  // string
    :            ^^^^^^^^^^^^
    `----

Error: 
  > <T extends string>(literal: T) => T extends `foo.bar.${infer R}` ? R : unknown

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:92:1]
 92 | declare const someString: string;
 93 | const t3 = takesLiteral(`foo.bar.${someString}`);  // string
    :                                    ^^^^^^^^^^
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:92:1]
 92 | declare const someString: string;
 93 | const t3 = takesLiteral(`foo.bar.${someString}`);  // string
    :                         ^^^^^^^^^^^^^^^^^^^^^^^
    `----

Error: 
  > `foo.bar.${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:92:1]
 92 | declare const someString: string;
 93 | const t3 = takesLiteral(`foo.bar.${someString}`);  // string
    :            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:94:1]
 94 | 
 95 | const id4 = `foo.bar.${someString}`;
    :                        ^^^^^^^^^^
 96 | const t4 = takesLiteral(id4);  // unknown
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:94:1]
 94 | 
 95 | const id4 = `foo.bar.${someString}`;
    :             ^^^^^^^^^^^^^^^^^^^^^^^
 96 | const t4 = takesLiteral(id4);  // unknown
    `----

Error: 
  > `foo.bar.${string}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:95:1]
 95 | const id4 = `foo.bar.${someString}`;
 96 | const t4 = takesLiteral(id4);  // unknown
    :            ^^^^^^^^^^^^
    `----

Error: 
  > <T extends string>(literal: T) => T extends `foo.bar.${infer R}` ? R : unknown

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:95:1]
 95 | const id4 = `foo.bar.${someString}`;
 96 | const t4 = takesLiteral(id4);  // unknown
    :                         ^^^
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:95:1]
 95 | const id4 = `foo.bar.${someString}`;
 96 | const t4 = takesLiteral(id4);  // unknown
    :            ^^^^^^^^^^^^^^^^^
    `----

Error: 
  > unknown

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:98:1]
 98 | declare const someUnion: 'abc' | 'def' | 'ghi';
 99 | const t5 = takesLiteral(`foo.bar.${someUnion}`);  // "abc" | "def" | "ghi"
    :            ^^^^^^^^^^^^
    `----

Error: 
  > <T extends string>(literal: T) => T extends `foo.bar.${infer R}` ? R : unknown

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:98:1]
 98 | declare const someUnion: 'abc' | 'def' | 'ghi';
 99 | const t5 = takesLiteral(`foo.bar.${someUnion}`);  // "abc" | "def" | "ghi"
    :                                    ^^^^^^^^^
    `----

Error: 
  > ('abc' | 'def' | 'ghi')

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:98:1]
 98 | declare const someUnion: 'abc' | 'def' | 'ghi';
 99 | const t5 = takesLiteral(`foo.bar.${someUnion}`);  // "abc" | "def" | "ghi"
    :                         ^^^^^^^^^^^^^^^^^^^^^^
    `----

Error: 
  > `foo.bar.${('abc' | 'def' | 'ghi')}`

  x Type
    ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:98:1]
 98 | declare const someUnion: 'abc' | 'def' | 'ghi';
 99 | const t5 = takesLiteral(`foo.bar.${someUnion}`);  // "abc" | "def" | "ghi"
    :            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    `----

Error: 
  > ('abc' | 'def' | 'ghi')

  x Type
     ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:106:1]
 106 | 
 107 | const pixelString: PixelValueType = `22px`;
     :                                     ^^^^^^
     `----

Error: 
  > `22px`

  x Type
     ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:108:1]
 108 | 
 109 | const pixelStringWithTemplate: PixelValueType = `${pixelValue}px`;
     :                                                    ^^^^^^^^^^
     `----

Error: 
  > number

  x Type
     ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:108:1]
 108 | 
 109 | const pixelStringWithTemplate: PixelValueType = `${pixelValue}px`;
     :                                                 ^^^^^^^^^^^^^^^^^
     `----

Error: 
  > `${number}px`

  x Type
     ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:113:1]
 113 | function getCardTitle(title: string): `test-${string}` {
 114 |     return `test-${title}`;
     :                    ^^^^^
 115 | }
     `----

Error: 
  > string

  x Type
     ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:113:1]
 113 | function getCardTitle(title: string): `test-${string}` {
 114 |     return `test-${title}`;
     :            ^^^^^^^^^^^^^^^
 115 | }
     `----

Error: 
  > `test-${string}`

  x Type
     ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:118:1]
 118 | 
 119 | const interpolatedStyle = { rotate: 12 };
     :                           ^^^^^^^^^^^^^^
 120 | function C2(transform: "-moz-initial" | (string & {})) { return 12; }
     `----

Error: 
  > {
  |     rotate: 12;
  | }

  x Type
     ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:120:1]
 120 | function C2(transform: "-moz-initial" | (string & {})) { return 12; }
 121 | C2(`rotate(${interpolatedStyle.rotate}dig)`);
     : ^^
     `----

Error: 
  > (transform: ("-moz-initial" | string)) => number

  x Type
     ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:120:1]
 120 | function C2(transform: "-moz-initial" | (string & {})) { return 12; }
 121 | C2(`rotate(${interpolatedStyle.rotate}dig)`);
     :              ^^^^^^^^^^^^^^^^^
     `----

Error: 
  > {
  |     rotate: number;
  | }

  x Type
     ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:120:1]
 120 | function C2(transform: "-moz-initial" | (string & {})) { return 12; }
 121 | C2(`rotate(${interpolatedStyle.rotate}dig)`);
     :              ^^^^^^^^^^^^^^^^^^^^^^^^
     `----

Error: 
  > number

  x Type
     ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:120:1]
 120 | function C2(transform: "-moz-initial" | (string & {})) { return 12; }
 121 | C2(`rotate(${interpolatedStyle.rotate}dig)`);
     :    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     `----

Error: 
  > `rotate(${number}dig)`

  x Type
     ,-[$DIR/tests/visualize/types/literal/templateLiteralTypes2.ts:120:1]
 120 | function C2(transform: "-moz-initial" | (string & {})) { return 12; }
 121 | C2(`rotate(${interpolatedStyle.rotate}dig)`);
     : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     `----

Error: 
  > number
