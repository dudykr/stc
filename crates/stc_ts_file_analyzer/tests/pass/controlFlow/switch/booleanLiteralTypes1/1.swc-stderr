
  x Type
   ,-[$DIR/tests/pass/controlFlow/switch/booleanLiteralTypes1/1.ts:2:1]
 2 | function assertNever(x: never): never {
 3 |     throw new Error("Unexpected value");
   :               ^^^^^
 4 | }
   `----

Error: 
  > ErrorConstructor

  x Type
   ,-[$DIR/tests/pass/controlFlow/switch/booleanLiteralTypes1/1.ts:2:1]
 2 | function assertNever(x: never): never {
 3 |     throw new Error("Unexpected value");
   :           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 4 | }
   `----

Error: 
  > Error

  x Type
   ,-[$DIR/tests/pass/controlFlow/switch/booleanLiteralTypes1/1.ts:5:1]
 5 | 
 6 | type Item =
   :      ^^^^
 7 |     { kind: true, a: string } |
   `----

Error: 
  > ({
  |     kind: true;
  |     a: string;
  | } | {
  |     kind: false;
  |     b: string;
  | })

  x Type
    ,-[$DIR/tests/pass/controlFlow/switch/booleanLiteralTypes1/1.ts:10:1]
 10 | function f21(x: Item) {
 11 |     switch (x.kind) {
    :             ^
 12 |         case true: return x.a;
    `----

Error: 
  > ({
  |     kind: true;
  |     a: string;
  | } | {
  |     kind: false;
  |     b: string;
  | })

  x Type
    ,-[$DIR/tests/pass/controlFlow/switch/booleanLiteralTypes1/1.ts:10:1]
 10 | function f21(x: Item) {
 11 |     switch (x.kind) {
    :             ^^^^^^
 12 |         case true: return x.a;
    `----

Error: 
  > (true | false)

  x Type
    ,-[$DIR/tests/pass/controlFlow/switch/booleanLiteralTypes1/1.ts:11:1]
 11 |     switch (x.kind) {
 12 |         case true: return x.a;
    :              ^^^^
 13 |         case false: return x.b;
    `----

Error: 
  > boolean

  x Type
    ,-[$DIR/tests/pass/controlFlow/switch/booleanLiteralTypes1/1.ts:11:1]
 11 |     switch (x.kind) {
 12 |         case true: return x.a;
    :                           ^
 13 |         case false: return x.b;
    `----

Error: 
  > {
  |     kind: true;
  |     a: string;
  | }

  x Type
    ,-[$DIR/tests/pass/controlFlow/switch/booleanLiteralTypes1/1.ts:11:1]
 11 |     switch (x.kind) {
 12 |         case true: return x.a;
    :                           ^^^
 13 |         case false: return x.b;
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/pass/controlFlow/switch/booleanLiteralTypes1/1.ts:12:1]
 12 |         case true: return x.a;
 13 |         case false: return x.b;
    :              ^^^^^
 14 |     }
    `----

Error: 
  > boolean

  x Type
    ,-[$DIR/tests/pass/controlFlow/switch/booleanLiteralTypes1/1.ts:12:1]
 12 |         case true: return x.a;
 13 |         case false: return x.b;
    :                            ^
 14 |     }
    `----

Error: 
  > {
  |     kind: false;
  |     b: string;
  | }

  x Type
    ,-[$DIR/tests/pass/controlFlow/switch/booleanLiteralTypes1/1.ts:12:1]
 12 |         case true: return x.a;
 13 |         case false: return x.b;
    :                            ^^^
 14 |     }
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/pass/controlFlow/switch/booleanLiteralTypes1/1.ts:14:1]
 14 |     }
 15 |     return assertNever(x);
    :            ^^^^^^^^^^^
 16 | }
    `----

Error: 
  > (x: never) => never

  x Type
    ,-[$DIR/tests/pass/controlFlow/switch/booleanLiteralTypes1/1.ts:14:1]
 14 |     }
 15 |     return assertNever(x);
    :                        ^
 16 | }
    `----

Error: 
  > never

  x Type
    ,-[$DIR/tests/pass/controlFlow/switch/booleanLiteralTypes1/1.ts:14:1]
 14 |     }
 15 |     return assertNever(x);
    :            ^^^^^^^^^^^^^^
 16 | }
    `----

Error: 
  > never
