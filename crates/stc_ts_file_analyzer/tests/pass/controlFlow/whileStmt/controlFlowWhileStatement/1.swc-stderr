
  x Type
   ,-[$DIR/tests/pass/controlFlow/whileStmt/controlFlowWhileStatement/1.ts:1:1]
 1 | export declare let x: string | number;
 2 | x = "";
   : ^^^^^^
 3 | while (x > 1) {
   `----

Error: 
  > ""

  x Type
   ,-[$DIR/tests/pass/controlFlow/whileStmt/controlFlowWhileStatement/1.ts:2:1]
 2 | x = "";
 3 | while (x > 1) {
   :        ^
 4 |     x; // string | number
   `----

Error: 
  > string

  x Type
   ,-[$DIR/tests/pass/controlFlow/whileStmt/controlFlowWhileStatement/1.ts:2:1]
 2 | x = "";
 3 | while (x > 1) {
   :        ^^^^^
 4 |     x; // string | number
   `----

Error: 
  > boolean

  x Type
   ,-[$DIR/tests/pass/controlFlow/whileStmt/controlFlowWhileStatement/1.ts:3:1]
 3 | while (x > 1) {
 4 |     x; // string | number
   :     ^
 5 |     x = 1;
   `----

Error: 
  > string

  x Type
   ,-[$DIR/tests/pass/controlFlow/whileStmt/controlFlowWhileStatement/1.ts:4:1]
 4 |     x; // string | number
 5 |     x = 1;
   :     ^^^^^
 6 |     x; // number
   `----

Error: 
  > 1

  x Type
   ,-[$DIR/tests/pass/controlFlow/whileStmt/controlFlowWhileStatement/1.ts:5:1]
 5 |     x = 1;
 6 |     x; // number
   :     ^
 7 | }
   `----

Error: 
  > number

  x Type
   ,-[$DIR/tests/pass/controlFlow/whileStmt/controlFlowWhileStatement/1.ts:2:1]
 2 | x = "";
 3 | while (x > 1) {
   :        ^
 4 |     x; // string | number
   `----

Error: 
  > number

  x Type
   ,-[$DIR/tests/pass/controlFlow/whileStmt/controlFlowWhileStatement/1.ts:3:1]
 3 | while (x > 1) {
 4 |     x; // string | number
   :     ^
 5 |     x = 1;
   `----

Error: 
  > number

  x Type
   ,-[$DIR/tests/pass/controlFlow/whileStmt/controlFlowWhileStatement/1.ts:7:1]
 7 | }
 8 | x; // string | number
   : ^
   `----

Error: 
  > (number | string)
