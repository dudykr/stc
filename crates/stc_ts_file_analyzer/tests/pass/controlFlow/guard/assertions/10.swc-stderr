
  x Type
   ,-[$DIR/tests/pass/controlFlow/guard/assertions/10.ts:6:1]
 6 | 
 7 | export type Optional<a> = Some<a> | None;
   :             ^^^^^^^^
   `----

Error: 
  > (Some<a> | None)

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/10.ts:11:1]
 11 | 
 12 | export const none: None = { none: '' };
    :                           ^^^^^^^^^^^^
    `----

Error: 
  > {
  |     none: '';
  | }

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/10.ts:14:1]
 14 | export function isSome<a>(value: Optional<a>): value is Some<a> {
 15 |     return 'some' in value;
    :                      ^^^^^
 16 | }
    `----

Error: 
  > (Some | None)

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/10.ts:14:1]
 14 | export function isSome<a>(value: Optional<a>): value is Some<a> {
 15 |     return 'some' in value;
    :            ^^^^^^^^^^^^^^^
 16 | }
    `----

Error: 
  > boolean

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/10.ts:18:1]
 18 | function someFrom<a>(some: a) {
 19 |     return { some };
    :            ^^^^^^^^
 20 | }
    `----

Error: 
  > {
  |     some: a;
  | }

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/10.ts:23:1]
 23 |     let x: string;
 24 |     x!.slice();
    :     ^
 25 | }
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/10.ts:23:1]
 23 |     let x: string;
 24 |     x!.slice();
    :     ^^
 25 | }
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/10.ts:23:1]
 23 |     let x: string;
 24 |     x!.slice();
    :     ^^^^^^^^^^
 25 | }
    `----

Error: 
  > string
