
  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/3.ts:12:1]
 12 | export const none: None = { none: '' };
    :                           ^^^^^^^^^^^^
    `----

Error: 
  > {
  |     none: '';
  | }

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/3.ts:15:5]
 15 | return 'some' in value;
    :                  ^^^^^
    `----

Error: 
  > (Some | None)

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/3.ts:15:5]
 15 | return 'some' in value;
    :        ^^^^^^^^^^^^^^^
    `----

Error: 
  > boolean

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/3.ts:19:5]
 19 | return { some };
    :        ^^^^^^^^
    `----

Error: 
  > {
  |     some: a;
  | }

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/3.ts:24:5]
 24 | x;  // number
    : ^
    `----

Error: 
  > number

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/3.ts:25:5]
 25 | while (cond) {
    :        ^^^^
    `----

Error: 
  > boolean

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/3.ts:26:9]
 26 | x;  // number, then string | number
    : ^
    `----

Error: 
  > number

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/3.ts:27:9]
 27 | if (typeof x === "string") {
    :            ^
    `----

Error: 
  > number

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/3.ts:27:9]
 27 | if (typeof x === "string") {
    :     ^^^^^^^^
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/3.ts:27:9]
 27 | if (typeof x === "string") {
    :     ^^^^^^^^^^^^^^^^^^^^^
    `----

Error: 
  > boolean

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/3.ts:28:13]
 28 | x = x.slice();
    :     ^
    `----

Error: 
  > never

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/3.ts:28:13]
 28 | x = x.slice();
    : ^^^^^^^^^^^^^
    `----

Error: 
  > any

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/3.ts:31:13]
 31 | x = "abc";
    : ^^^^^^^^^
    `----

Error: 
  > "abc"

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/3.ts:33:9]
 33 | x;  // string
    : ^
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/3.ts:26:9]
 26 | x;  // number, then string | number
    : ^
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/3.ts:27:9]
 27 | if (typeof x === "string") {
    :            ^
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/3.ts:28:13]
 28 | x = x.slice();
    :     ^
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/3.ts:28:13]
 28 | x = x.slice();
    :     ^^^^^^^^^
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/3.ts:28:13]
 28 | x = x.slice();
    : ^^^^^^^^^^^^^
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/pass/controlFlow/guard/assertions/3.ts:35:5]
 35 | x;
    : ^
    `----

Error: 
  > (string | number)
