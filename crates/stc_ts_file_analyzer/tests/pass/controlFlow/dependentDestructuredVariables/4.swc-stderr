
  x Type
   ,-[$DIR/tests/pass/controlFlow/dependentDestructuredVariables/4.ts:6:3]
 6 | const { kind, payload } = foo;
   :                           ^^^
   `----

Error: 
  > ({
  |     kind: "A";
  |     payload: number;
  | } | {
  |     kind: "B";
  |     payload: string;
  | })

  x Type
   ,-[$DIR/tests/pass/controlFlow/dependentDestructuredVariables/4.ts:7:3]
 7 | if (kind === "A") {
   :     ^^^^
   `----

Error: 
  > ("A" | "B")

  x Type
   ,-[$DIR/tests/pass/controlFlow/dependentDestructuredVariables/4.ts:7:3]
 7 | if (kind === "A") {
   :     ^^^^^^^^^^^^
   `----

Error: 
  > boolean

  x Type
   ,-[$DIR/tests/pass/controlFlow/dependentDestructuredVariables/4.ts:8:5]
 8 | payload.toFixed();
   : ^^^^^^^
   `----

Error: 
  > number

  x Type
   ,-[$DIR/tests/pass/controlFlow/dependentDestructuredVariables/4.ts:8:5]
 8 | payload.toFixed();
   : ^^^^^^^^^^^^^^^^^
   `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/pass/controlFlow/dependentDestructuredVariables/4.ts:10:3]
 10 | if (kind === "B") {
    :     ^^^^
    `----

Error: 
  > ("A" | "B")

  x Type
    ,-[$DIR/tests/pass/controlFlow/dependentDestructuredVariables/4.ts:10:3]
 10 | if (kind === "B") {
    :     ^^^^^^^^^^^^
    `----

Error: 
  > boolean

  x Type
    ,-[$DIR/tests/pass/controlFlow/dependentDestructuredVariables/4.ts:11:5]
 11 | payload.toUpperCase();
    : ^^^^^^^
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/pass/controlFlow/dependentDestructuredVariables/4.ts:11:5]
 11 | payload.toUpperCase();
    : ^^^^^^^^^^^^^^^^^^^^^
    `----

Error: 
  > string
