
  x Type
   ,-[$DIR/tests/pass/controlFlow/dependentDestructuredVariables/4.ts:2:1]
 2 | 
 3 | type Func = <T extends ["a", number] | ["b", string]>(...args: T) => void;
   :      ^^^^
   `----

Error: 
  > <T extends (["a", number] | ["b", string])>(...args: T) => void

  x Type
   ,-[$DIR/tests/pass/controlFlow/dependentDestructuredVariables/4.ts:5:1]
 5 | const f60: Func = (kind, payload) => {
 6 |   if (kind === "a") {
   :       ^^^^
 7 |     payload.toFixed(); // error
   `----

Error: 
  > ("a" | "b")

  x Type
   ,-[$DIR/tests/pass/controlFlow/dependentDestructuredVariables/4.ts:5:1]
 5 | const f60: Func = (kind, payload) => {
 6 |   if (kind === "a") {
   :       ^^^^^^^^^^^^
 7 |     payload.toFixed(); // error
   `----

Error: 
  > boolean

  x Type
   ,-[$DIR/tests/pass/controlFlow/dependentDestructuredVariables/4.ts:6:1]
 6 |   if (kind === "a") {
 7 |     payload.toFixed(); // error
   :     ^^^^^^^
 8 |   }
   `----

Error: 
  > number

  x Type
   ,-[$DIR/tests/pass/controlFlow/dependentDestructuredVariables/4.ts:6:1]
 6 |   if (kind === "a") {
 7 |     payload.toFixed(); // error
   :     ^^^^^^^^^^^^^^^^^
 8 |   }
   `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/pass/controlFlow/dependentDestructuredVariables/4.ts:8:1]
  8 |   }
  9 |   if (kind === "b") {
    :       ^^^^
 10 |     payload.toUpperCase(); // error
    `----

Error: 
  > ("a" | "b")

  x Type
    ,-[$DIR/tests/pass/controlFlow/dependentDestructuredVariables/4.ts:8:1]
  8 |   }
  9 |   if (kind === "b") {
    :       ^^^^^^^^^^^^
 10 |     payload.toUpperCase(); // error
    `----

Error: 
  > boolean

  x Type
    ,-[$DIR/tests/pass/controlFlow/dependentDestructuredVariables/4.ts:9:1]
  9 |   if (kind === "b") {
 10 |     payload.toUpperCase(); // error
    :     ^^^^^^^
 11 |   }
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/pass/controlFlow/dependentDestructuredVariables/4.ts:9:1]
  9 |   if (kind === "b") {
 10 |     payload.toUpperCase(); // error
    :     ^^^^^^^^^^^^^^^^^^^^^
 11 |   }
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/pass/controlFlow/dependentDestructuredVariables/4.ts:4:1]
  4 |     
  5 | ,-> const f60: Func = (kind, payload) => {
  6 | |     if (kind === "a") {
  7 | |       payload.toFixed(); // error
  8 | |     }
  9 | |     if (kind === "b") {
 10 | |       payload.toUpperCase(); // error
 11 | |     }
 12 | `-> };
    `----

Error: 
  > (kind: ("a" | "b"), payload: (number | string)) => void
