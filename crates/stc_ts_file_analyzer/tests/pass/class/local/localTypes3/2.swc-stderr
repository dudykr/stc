
  x Type
   ,-[$DIR/tests/pass/class/local/localTypes3/2.ts:3:1]
 3 |         class C<Y> {
 4 |             public x = x;
   :                        ^
 5 |             constructor(public y: Y) { }
   `----

Error: 
  > X

  x Type
   ,-[$DIR/tests/pass/class/local/localTypes3/2.ts:6:1]
 6 |         }
 7 |         return C;
   :                ^
 8 |     }
   `----

Error: 
  > typeof C

  x Type
    ,-[$DIR/tests/pass/class/local/localTypes3/2.ts:8:1]
  8 |     }
  9 |     let C = f(10);
    :             ^
 10 |     let v = new C("hello");
    `----

Error: 
  > <X>(x: X) => typeof C

  x Type
    ,-[$DIR/tests/pass/class/local/localTypes3/2.ts:8:1]
  8 |     }
  9 |     let C = f(10);
    :             ^^^^^
 10 |     let v = new C("hello");
    `----

Error: 
  > typeof C

  x Type
    ,-[$DIR/tests/pass/class/local/localTypes3/2.ts:9:1]
  9 |     let C = f(10);
 10 |     let v = new C("hello");
    :                 ^
 11 |     let x = v.x;
    `----

Error: 
  > typeof C

  x Type
    ,-[$DIR/tests/pass/class/local/localTypes3/2.ts:9:1]
  9 |     let C = f(10);
 10 |     let v = new C("hello");
    :             ^^^^^^^^^^^^^^
 11 |     let x = v.x;
    `----

Error: 
  > C

  x Type
    ,-[$DIR/tests/pass/class/local/localTypes3/2.ts:10:1]
 10 |     let v = new C("hello");
 11 |     let x = v.x;
    :             ^
 12 |     let y = v.y;
    `----

Error: 
  > C

  x Type
    ,-[$DIR/tests/pass/class/local/localTypes3/2.ts:10:1]
 10 |     let v = new C("hello");
 11 |     let x = v.x;
    :             ^^^
 12 |     let y = v.y;
    `----

Error: 
  > number

  x Type
    ,-[$DIR/tests/pass/class/local/localTypes3/2.ts:11:1]
 11 |     let x = v.x;
 12 |     let y = v.y;
    :             ^
 13 | }
    `----

Error: 
  > C

  x Type
    ,-[$DIR/tests/pass/class/local/localTypes3/2.ts:11:1]
 11 |     let x = v.x;
 12 |     let y = v.y;
    :             ^^^
 13 | }
    `----

Error: 
  > string
