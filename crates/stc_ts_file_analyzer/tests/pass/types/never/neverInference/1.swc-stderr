
  x Type
   ,-[$DIR/tests/pass/types/never/neverInference/1.ts:2:1]
 2 | f2(Array.from([0]), [], (a1, a2) => a1 - a2);
   : ^^
   `----

Error: 
  > <a>(as1: a[], as2: a[], cmp: (a1: a, a2: a) => number) => void

  x Type
   ,-[$DIR/tests/pass/types/never/neverInference/1.ts:2:1]
 2 | f2(Array.from([0]), [], (a1, a2) => a1 - a2);
   :    ^^^^^
   `----

Error: 
  > ArrayConstructor

  x Type
   ,-[$DIR/tests/pass/types/never/neverInference/1.ts:2:1]
 2 | f2(Array.from([0]), [], (a1, a2) => a1 - a2);
   :               ^^^
   `----

Error: 
  > [0]

  x Type
   ,-[$DIR/tests/pass/types/never/neverInference/1.ts:2:1]
 2 | f2(Array.from([0]), [], (a1, a2) => a1 - a2);
   :    ^^^^^^^^^^^^^^^
   `----

Error: 
  > number[]

  x Type
   ,-[$DIR/tests/pass/types/never/neverInference/1.ts:2:1]
 2 | f2(Array.from([0]), [], (a1, a2) => a1 - a2);
   :                     ^^
   `----

Error: 
  > any[]

  x Type
   ,-[$DIR/tests/pass/types/never/neverInference/1.ts:2:1]
 2 | f2(Array.from([0]), [], (a1, a2) => a1 - a2);
   :                                     ^^
   `----

Error: 
  > any

  x Type
   ,-[$DIR/tests/pass/types/never/neverInference/1.ts:2:1]
 2 | f2(Array.from([0]), [], (a1, a2) => a1 - a2);
   :                                          ^^
   `----

Error: 
  > any

  x Type
   ,-[$DIR/tests/pass/types/never/neverInference/1.ts:2:1]
 2 | f2(Array.from([0]), [], (a1, a2) => a1 - a2);
   :                                     ^^^^^^^
   `----

Error: 
  > number

  x Type
   ,-[$DIR/tests/pass/types/never/neverInference/1.ts:2:1]
 2 | f2(Array.from([0]), [], (a1, a2) => a1 - a2);
   :                         ^^^^^^^^^^^^^^^^^^^
   `----

Error: 
  > (a1: any, a2: any) => number

  x Type
   ,-[$DIR/tests/pass/types/never/neverInference/1.ts:2:1]
 2 | f2(Array.from([0]), [], (a1, a2) => a1 - a2);
   : ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   `----

Error: 
  > void
