
  x Type
   ,-[$DIR/tests/pass/types/inference/generatedContextualTypings/1.ts:2:1]
 2 | class Derived1 extends Base { private m; }
   :                        ^^^^
   `----

Error: 
  > typeof Base

  x Type
   ,-[$DIR/tests/pass/types/inference/generatedContextualTypings/1.ts:3:1]
 3 | class Derived2 extends Base { private n; }
   :                        ^^^^
   `----

Error: 
  > typeof Base

  x Type
   ,-[$DIR/tests/pass/types/inference/generatedContextualTypings/1.ts:5:1]
 5 | var b = new Base(), d1 = new Derived1(), d2 = new Derived2();
   :             ^^^^
   `----

Error: 
  > typeof Base

  x Type
   ,-[$DIR/tests/pass/types/inference/generatedContextualTypings/1.ts:5:1]
 5 | var b = new Base(), d1 = new Derived1(), d2 = new Derived2();
   :         ^^^^^^^^^^
   `----

Error: 
  > Base

  x Type
   ,-[$DIR/tests/pass/types/inference/generatedContextualTypings/1.ts:5:1]
 5 | var b = new Base(), d1 = new Derived1(), d2 = new Derived2();
   :                              ^^^^^^^^
   `----

Error: 
  > typeof Derived1

  x Type
   ,-[$DIR/tests/pass/types/inference/generatedContextualTypings/1.ts:5:1]
 5 | var b = new Base(), d1 = new Derived1(), d2 = new Derived2();
   :                          ^^^^^^^^^^^^^^
   `----

Error: 
  > Derived1

  x Type
   ,-[$DIR/tests/pass/types/inference/generatedContextualTypings/1.ts:5:1]
 5 | var b = new Base(), d1 = new Derived1(), d2 = new Derived2();
   :                                                   ^^^^^^^^
   `----

Error: 
  > typeof Derived2

  x Type
   ,-[$DIR/tests/pass/types/inference/generatedContextualTypings/1.ts:5:1]
 5 | var b = new Base(), d1 = new Derived1(), d2 = new Derived2();
   :                                               ^^^^^^^^^^^^^^
   `----

Error: 
  > Derived2

  x Type
   ,-[$DIR/tests/pass/types/inference/generatedContextualTypings/1.ts:7:1]
 7 | export class x87 { constructor(parm: () => Base[] = function named() { return [d1, d2] }) { } }
   :                                                                                ^^
   `----

Error: 
  > Derived1

  x Type
   ,-[$DIR/tests/pass/types/inference/generatedContextualTypings/1.ts:7:1]
 7 | export class x87 { constructor(parm: () => Base[] = function named() { return [d1, d2] }) { } }
   :                                                                                    ^^
   `----

Error: 
  > Derived2

  x Type
   ,-[$DIR/tests/pass/types/inference/generatedContextualTypings/1.ts:7:1]
 7 | export class x87 { constructor(parm: () => Base[] = function named() { return [d1, d2] }) { } }
   :                                                                               ^^^^^^^^
   `----

Error: 
  > [Derived1, Derived2]

  x Type
   ,-[$DIR/tests/pass/types/inference/generatedContextualTypings/1.ts:7:1]
 7 | export class x87 { constructor(parm: () => Base[] = function named() { return [d1, d2] }) { } }
   :                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   `----

Error: 
  > () => [Derived1, Derived2]

  x Type
   ,-[$DIR/tests/pass/types/inference/generatedContextualTypings/1.ts:8:1]
 8 | export class x90 { constructor(parm: { (): Base[]; } = function named() { return [d1, d2] }) { } }
   :                                                                                   ^^
   `----

Error: 
  > Derived1

  x Type
   ,-[$DIR/tests/pass/types/inference/generatedContextualTypings/1.ts:8:1]
 8 | export class x90 { constructor(parm: { (): Base[]; } = function named() { return [d1, d2] }) { } }
   :                                                                                       ^^
   `----

Error: 
  > Derived2

  x Type
   ,-[$DIR/tests/pass/types/inference/generatedContextualTypings/1.ts:8:1]
 8 | export class x90 { constructor(parm: { (): Base[]; } = function named() { return [d1, d2] }) { } }
   :                                                                                  ^^^^^^^^
   `----

Error: 
  > [Derived1, Derived2]

  x Type
   ,-[$DIR/tests/pass/types/inference/generatedContextualTypings/1.ts:8:1]
 8 | export class x90 { constructor(parm: { (): Base[]; } = function named() { return [d1, d2] }) { } }
   :                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   `----

Error: 
  > () => [Derived1, Derived2]
