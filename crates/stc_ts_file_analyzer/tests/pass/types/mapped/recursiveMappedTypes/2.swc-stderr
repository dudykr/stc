
  x Type
   ,-[$DIR/tests/pass/types/mapped/recursiveMappedTypes/2.ts:2:1]
 2 | 
 3 | type NonOptionalKeys<T> = {
   :      ^^^^^^^^^^^^^^^
 4 |   [P in keyof T]: undefined extends T[P] ? never : P;
   `----

Error: 
  > {
  |     [P in keyof T]: undefined extends T[P] ? never : P;
  | }[keyof T]

  x Type
   ,-[$DIR/tests/pass/types/mapped/recursiveMappedTypes/2.ts:5:1]
 5 | }[keyof T];
 6 | type Child<T> = { [P in NonOptionalKeys<T>]: T[P] };
   :      ^^^^^
   `----

Error: 
  > {
  |     [P in NonOptionalKeys<T>]: T[P];
  | }

  x Type
    ,-[$DIR/tests/pass/types/mapped/recursiveMappedTypes/2.ts:14:1]
 14 | 
 15 | type ListChild = Child<ListWidget>;
    :      ^^^^^^^^^
    `----

Error: 
  > Child<ListWidget>

  x Type
    ,-[$DIR/tests/pass/types/mapped/recursiveMappedTypes/2.ts:17:1]
 17 | declare let x: ListChild;
 18 | x;
    : ^
 19 | x.type;
    `----

Error: 
  > {
  |     [P in NonOptionalKeys<ListWidget>]: ListWidget[P];
  | }

  x Type
    ,-[$DIR/tests/pass/types/mapped/recursiveMappedTypes/2.ts:18:1]
 18 | x;
 19 | x.type;
    : ^
    `----

Error: 
  > {
  |     [P in NonOptionalKeys<ListWidget>]: ListWidget[P];
  | }

  x Type
    ,-[$DIR/tests/pass/types/mapped/recursiveMappedTypes/2.ts:18:1]
 18 | x;
 19 | x.type;
    : ^^^^^^
    `----

Error: 
  > {
  |     [P in NonOptionalKeys<ListWidget>]: ListWidget[P];
  | }["type"]
