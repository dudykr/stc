
  x Type
   ,-[$DIR/tests/pass/types/predicate/controlFlowOptionalChain/1.ts:3:1]
 3 | declare const x: string | number;
 4 | if (f?.(x)) {
   :     ^
 5 |     x; // number
   `----

Error: 
  > (undefined | (x: any) => x is number)

  x Type
   ,-[$DIR/tests/pass/types/predicate/controlFlowOptionalChain/1.ts:3:1]
 3 | declare const x: string | number;
 4 | if (f?.(x)) {
   :         ^
 5 |     x; // number
   `----

Error: 
  > (string | number)

  x Type
   ,-[$DIR/tests/pass/types/predicate/controlFlowOptionalChain/1.ts:3:1]
 3 | declare const x: string | number;
 4 | if (f?.(x)) {
   :     ^^^^^^
 5 |     x; // number
   `----

Error: 
  > (undefined | x is number)

  x Type
   ,-[$DIR/tests/pass/types/predicate/controlFlowOptionalChain/1.ts:4:1]
 4 | if (f?.(x)) {
 5 |     x; // number
   :     ^
 6 |     f; // (x: any) => x is number
   `----

Error: 
  > number

  x Type
   ,-[$DIR/tests/pass/types/predicate/controlFlowOptionalChain/1.ts:5:1]
 5 |     x; // number
 6 |     f; // (x: any) => x is number
   :     ^
 7 |     f(x);
   `----

Error: 
  > (x: any) => x is number

  x Type
   ,-[$DIR/tests/pass/types/predicate/controlFlowOptionalChain/1.ts:6:1]
 6 |     f; // (x: any) => x is number
 7 |     f(x);
   :     ^
 8 | }
   `----

Error: 
  > (x: any) => x is number

  x Type
   ,-[$DIR/tests/pass/types/predicate/controlFlowOptionalChain/1.ts:6:1]
 6 |     f; // (x: any) => x is number
 7 |     f(x);
   :       ^
 8 | }
   `----

Error: 
  > number

  x Type
   ,-[$DIR/tests/pass/types/predicate/controlFlowOptionalChain/1.ts:6:1]
 6 |     f; // (x: any) => x is number
 7 |     f(x);
   :     ^^^^
 8 | }
   `----

Error: 
  > x is number

  x Type
    ,-[$DIR/tests/pass/types/predicate/controlFlowOptionalChain/1.ts:9:1]
  9 | else {
 10 |     x;
    :     ^
 11 |     f;
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/pass/types/predicate/controlFlowOptionalChain/1.ts:10:1]
 10 |     x;
 11 |     f;
    :     ^
 12 |     f(x);
    `----

Error: 
  > (undefined | (x: any) => x is number)

  x Type
    ,-[$DIR/tests/pass/types/predicate/controlFlowOptionalChain/1.ts:11:1]
 11 |     f;
 12 |     f(x);
    :     ^
 13 | }
    `----

Error: 
  > (undefined | (x: any) => x is number)

  x Type
    ,-[$DIR/tests/pass/types/predicate/controlFlowOptionalChain/1.ts:11:1]
 11 |     f;
 12 |     f(x);
    :       ^
 13 | }
    `----

Error: 
  > string

  x Type
    ,-[$DIR/tests/pass/types/predicate/controlFlowOptionalChain/1.ts:11:1]
 11 |     f;
 12 |     f(x);
    :     ^^^^
 13 | }
    `----

Error: 
  > x is number

  x Type
    ,-[$DIR/tests/pass/types/predicate/controlFlowOptionalChain/1.ts:13:1]
 13 | }
 14 | x;
    : ^
 15 | f;
    `----

Error: 
  > (string | number)

  x Type
    ,-[$DIR/tests/pass/types/predicate/controlFlowOptionalChain/1.ts:14:1]
 14 | x;
 15 | f;
    : ^
 16 | f(x);
    `----

Error: 
  > (undefined | (x: any) => x is number)

  x Type
    ,-[$DIR/tests/pass/types/predicate/controlFlowOptionalChain/1.ts:15:1]
 15 | f;
 16 | f(x);
    : ^
    `----

Error: 
  > (undefined | (x: any) => x is number)

  x Type
    ,-[$DIR/tests/pass/types/predicate/controlFlowOptionalChain/1.ts:15:1]
 15 | f;
 16 | f(x);
    :   ^
    `----

Error: 
  > (string | number)

  x Type
    ,-[$DIR/tests/pass/types/predicate/controlFlowOptionalChain/1.ts:15:1]
 15 | f;
 16 | f(x);
    : ^^^^
    `----

Error: 
  > x is number
