
  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:3:1]
 3 | for (let { x, ...restOf } of array) {
   :                              ^^^^^
   `----

Error: 
  > {
  |     x: number;
  |     y: string;
  | }[]

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:4:5]
 4 | [x, restOf];
   :  ^
   `----

Error: 
  > number

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:4:5]
 4 | [x, restOf];
   :     ^^^^^^
   `----

Error: 
  > {
  |     y: string;
  | }

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:4:5]
 4 | [x, restOf];
   : ^^^^^^^^^^^
   `----

Error: 
  > ((number | {
  |     y: string;
  | }))[]

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:7:1]
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
   :                                           ^
   `----

Error: 
  > any

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:7:1]
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
   :                                      ^^^^^^^^^^^^^^^^^^^^^^^
   `----

Error: 
  > any

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:7:1]
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
   :                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
   `----

Error: 
  > any

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:7:1]
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
   :                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   `----

Error: 
  > (a: any) => any

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:7:1]
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
   :                      ^^^^^
   `----

Error: 
  > {
  |     x: number;
  |     y: string;
  | }[]

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:7:1]
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
   :                                           ^
   `----

Error: 
  > {
  |     x: number;
  |     y: string;
  | }

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:7:1]
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
   :                                      ^^^^^^^^^^^^^^^^^^^^^^^
   `----

Error: 
  > {
  |     y: string;
  |     x: 'a string';
  | }

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:7:1]
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
   :                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
   `----

Error: 
  > {
  |     y: string;
  |     x: 'a string';
  | }

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:7:1]
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
   :                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   `----

Error: 
  > (a: {
  |     x: number;
  |     y: string;
  | }) => {
  |     y: string;
  |     x: 'a string';
  | }

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:7:1]
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
   :                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   `----

Error: 
  > {
  |     y: string;
  |     x: string;
  | }[]

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:8:5]
 8 | [norest.x, norest.y];
   :  ^^^^^^
   `----

Error: 
  > {
  |     y: string;
  |     x: string;
  | }

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:8:5]
 8 | [norest.x, norest.y];
   :  ^^^^^^^^
   `----

Error: 
  > string

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:8:5]
 8 | [norest.x, norest.y];
   :            ^^^^^^
   `----

Error: 
  > {
  |     y: string;
  |     x: string;
  | }

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:8:5]
 8 | [norest.x, norest.y];
   :            ^^^^^^^^
   `----

Error: 
  > string

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:8:5]
 8 | [norest.x, norest.y];
   : ^^^^^^^^^^^^^^^^^^^^
   `----

Error: 
  > [string, string]
