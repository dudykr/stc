
  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:2:1]
 2 | let array: { x: number, y: string }[];
 3 | for (let { x, ...restOf } of array) {
   :                              ^^^^^
 4 |     [x, restOf];
   `----

Error: 
  > {
  |     x: number;
  |     y: string;
  | }[]

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:3:1]
 3 | for (let { x, ...restOf } of array) {
 4 |     [x, restOf];
   :      ^
 5 | }
   `----

Error: 
  > number

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:3:1]
 3 | for (let { x, ...restOf } of array) {
 4 |     [x, restOf];
   :         ^^^^^^
 5 | }
   `----

Error: 
  > {
  |     y: string;
  | }

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:3:1]
 3 | for (let { x, ...restOf } of array) {
 4 |     [x, restOf];
   :     ^^^^^^^^^^^
 5 | }
   `----

Error: 
  > ((number | {
  |     y: string;
  | }))[]

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:6:1]
 6 | 
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
   :                      ^^^^^
 8 |     [norest.x, norest.y];
   `----

Error: 
  > {
  |     x: number;
  |     y: string;
  | }[]

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:6:1]
 6 | 
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
   :                                           ^
 8 |     [norest.x, norest.y];
   `----

Error: 
  > any

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:6:1]
 6 | 
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
   :                                      ^^^^^^^^^^^^^^^^^^^^^^^
 8 |     [norest.x, norest.y];
   `----

Error: 
  > any

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:6:1]
 6 | 
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
   :                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
 8 |     [norest.x, norest.y];
   `----

Error: 
  > any

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:6:1]
 6 | 
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
   :                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 8 |     [norest.x, norest.y];
   `----

Error: 
  > (a: any) => any

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:6:1]
 6 | 
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
   :                                           ^
 8 |     [norest.x, norest.y];
   `----

Error: 
  > {
  |     x: number;
  |     y: string;
  | }

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:6:1]
 6 | 
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
   :                                      ^^^^^^^^^^^^^^^^^^^^^^^
 8 |     [norest.x, norest.y];
   `----

Error: 
  > {
  |     y: string;
  |     x: 'a string';
  | }

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:6:1]
 6 | 
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
   :                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
 8 |     [norest.x, norest.y];
   `----

Error: 
  > {
  |     y: string;
  |     x: 'a string';
  | }

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:6:1]
 6 | 
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
   :                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 8 |     [norest.x, norest.y];
   `----

Error: 
  > (a: {
  |     x: number;
  |     y: string;
  | }) => {
  |     y: string;
  |     x: 'a string';
  | }

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:6:1]
 6 | 
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
   :                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 8 |     [norest.x, norest.y];
   `----

Error: 
  > {
  |     y: string;
  |     x: 'a string';
  | }[]

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:7:1]
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
 8 |     [norest.x, norest.y];
   :      ^^^^^^
 9 |     // x is now a string. who knows why.
   `----

Error: 
  > {
  |     y: string;
  |     x: 'a string';
  | }

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:7:1]
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
 8 |     [norest.x, norest.y];
   :      ^^^^^^^^
 9 |     // x is now a string. who knows why.
   `----

Error: 
  > 'a string'

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:7:1]
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
 8 |     [norest.x, norest.y];
   :                ^^^^^^
 9 |     // x is now a string. who knows why.
   `----

Error: 
  > {
  |     y: string;
  |     x: 'a string';
  | }

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:7:1]
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
 8 |     [norest.x, norest.y];
   :                ^^^^^^^^
 9 |     // x is now a string. who knows why.
   `----

Error: 
  > string

  x Type
   ,-[$DIR/tests/pass/vars/forOf/rest/2.ts:7:1]
 7 | for (const norest of array.map(a => ({ ...a, x: 'a string' }))) {
 8 |     [norest.x, norest.y];
   :     ^^^^^^^^^^^^^^^^^^^^
 9 |     // x is now a string. who knows why.
   `----

Error: 
  > ['a string', string]
